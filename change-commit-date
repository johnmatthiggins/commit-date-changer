#!/usr/bin/perl -w
use strict;
use warnings;

sub main {
    my $arg_count = $#ARGV + 1;

    if ($arg_count != 2) {
        print "usage: change-commit-date COMMIT_HASH DATE\n";
        exit 1;
    } else {
        my $commit = $ARGV[0];

        # if the commit isn't in the short format,
        # then we chop it down using rev-parse.
        if (length($commit) != 7)
        {
            $commit = chop_newline(`git rev-parse --short $ARGV[0]`);
        }

        my $date = $ARGV[1];

        # substitute this for our current editor.
        # then instead of being prompted with vim after rebasing this command
        # do all the work for us.
        my $commit_editor = "sed -i -e 's/^pick $commit/edit $commit/'";

        # save old editor so we can reset it later.
        my $old_editor    = chop_newline(`git config core.editor`);

        # replace old editor with sed command.
        set_git_editor($commit_editor);

        # run rebase which will trigger sed command.
        rebase($commit);

        # switch the date to the desired date.
        change_date($date);

        # finish rebasing.
        continue_rebase();

        # reset back to old editor because 'sed' isn't a real editor.
        set_git_editor($old_editor);
    }
}

sub rebase {
    system("git rebase -i $_[0]")
}

sub change_date
{
    my $date = $_[0];

    # switch the date to the desired date.
    system("GIT_COMMITER_DATE='$date' git commit --amend --no-edit --date '$date'");
}

sub continue_rebase {
    system("git rebase --continue");
}

# use this when getting output of commands.
sub chop_newline {
    my $str = $_[0];
    my $trimmed = substr($str, 0, (length($str) - 1));

    return $trimmed;
}

sub set_git_editor {
    my $old_editor = $_[0];
    system("git config core.editor \"$old_editor\" --replace-all");
}

main
